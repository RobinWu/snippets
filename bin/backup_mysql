#!/usr/bin/env ruby

# Dependeny:
# gem install mysql
# apt-get install gzip
#
# Install:
# curl https://raw.github.com/RobinWu/snippets/master/bin/backup_mysql -o /tmp/backup_mysql
# chmod +x /tmp/backup_mysql
# mv /tmp/backup_mysql /usr/local/bin/
#
# Examples:
# backup_mysql -u <user> -p <pwd> -d <db> -z
# backup_mysql -u <user> -p <pwd> -d <db> -z | xargs curl -u <user> ftp.*.com:<port>/tmp/ -T

require 'rubygems'
require 'optparse'
require 'mysql'

options = {}
OptionParser.new do |opts|
  opts.on_tail("-h", "--help", "get help for this CMD") { print(opts); exit() }

  opts.on("-h", "--host String", "Mysql Host default 'localhost'") { |v| options[:host] = v }
  opts.on("-u", "--user String", "Mysql user default 'root'")      { |v| options[:user] = v }
  opts.on("-p", "--pwd String", "Database password")                  { |v| options[:pwd] = v }
  opts.on("-d", "--db String", "Database name")                       { |v| options[:db] = v }
  opts.on("-o", "--output String", "Output file")                     { |v| options[:outfile] = v }
  opts.on("-z", "--[no-]verbose", "Compress outfile by gzip")         { |v| options[:zip] = v }
  opts.on("-v", "--[no-]verbose", "Run verbosely")                    { |v| options[:verbose] = v }
end.parse(ARGV)

def keyword_input(alert)
  puts alert
  while s = $stdin.gets.chomp
    return s
  end
end

def with_db(options={})
  config = {:host => 'localhost', :user => 'root'}.merge(options)
  config[:pwd] = keyword_input("Enter #{config[:user]} password:") if config[:pwd].nil?
  config[:db] = keyword_input("Enter database name:") if config[:db].nil?
  config[:outfile] = "#{config[:db]}-#{Time.now.strftime("%Y%m%d%H%M%S")}.sql" if config[:outfile].nil?

  dbh = Mysql.connect(config[:host], config[:user], config[:pwd], config[:db])
  dbh.query('SHOW VARIABLES;').each { |row| config[row[0].to_sym] = row[1] }.free;

  begin
    yield dbh, config
  ensure
    dbh.close
  end
end

def backup(options={})
  with_db(options) do |dbh, config|
    cmd = <<-CMD
      mysqldump -h #{config[:host]} -u #{config[:user]} -p'#{config[:pwd]}' \
      --skip-opt --create-option --set-charset --default-character-set=utf8 \
      -e --max_allowed_packet=#{config[:max_allowed_packet]} --net_buffer_length=#{config[:net_buffer_length]} #{config[:db]} > #{config[:outfile]}
    CMD
    puts cmd if config[:verbose]
    `#{cmd}`
    config[:outfile]
  end
end

def compress(file)
  puts `gzip -f #{file}`
  "#{file}.gz"
end

def run(options={})
  outfile = backup(options)
  if options[:zip]
    puts compress(outfile)
  else
    puts outfile
  end
end

run(options)
